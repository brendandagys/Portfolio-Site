AWSTemplateFormatVersion: '2010-09-09'
Description: Change Set CodeDeploy Pipeline

Conditions:
  CreateSourceBucket: !Equals [!Ref ExistingSourceBucket, '']

  CreateEcrRepository: !Equals [!Ref ExistingEcrRepository, '']
  CreateEcrRepository2: !Equals [!Ref ExistingEcrRepository2, '']

Parameters:
  ApplicationStackName:
    Description: Name of the not-yet-created Application CFN Stack
    Type: String
    Default: spending-tracker-django
    AllowedPattern: (^[a-z][a-z0-9-]+$)

  ChangeSetName:
    Description: Name of Cfn Change Set
    Type: String
    Default: spending-tracker-django
    AllowedPattern: (^[a-z][a-z0-9-]+$)

  # CodeCommit repository must == `AWS::StackName`
  Branch:
    Type: String
    Default: main
    Description: e.g. main or master

  ExistingSourceBucket:
    Type: String
    Default: arn:aws:s3:::spending-tracker-django-source
    Description: Bucket ARN

  ExistingSourceBucketName:
    Type: String
    Default: spending-tracker-django-source
    Description: BucketName property

  ExistingEcrRepository:
    Type: String
    Default: 708746137251.dkr.ecr.us-east-1.amazonaws.com/spending-tracker-django
    Description: Repository URI

  ExistingEcrRepository2:
    Type: String
    Default: 708746137251.dkr.ecr.us-east-1.amazonaws.com/spending-tracker-django-nginx

  EcrRepositoryName:
    Type: String
    Default: spending-tracker-django

  EcrRepositoryName2:
    Type: String
    Default: spending-tracker-django-nginx

  # ExistingAwsVpc:
  #   Description: Name of existing AWS Vpc
  #   Type: AWS::EC2::VPC::Id
  # ExistingLoadbalancer:
  #   Description: ARN of existing Application Load Balancer
  #   Type: String
  # ExistingEcsCluster:
  #   Description: Name of existing ECS Cluster
  #   Type: String

Resources:
  EcrRepository:
    Type: AWS::ECR::Repository
    Condition: CreateEcrRepository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref EcrRepositoryName

  EcrRepository2:
    Type: AWS::ECR::Repository
    Condition: CreateEcrRepository2
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref EcrRepositoryName2

  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateSourceBucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-source'
      VersioningConfiguration:
        Status: Enabled

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

  PipelineRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PipelineRoleDefaultPolicy
      Roles:
        - Ref: PipelineRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ec2:CreateTags
              - ec2:DeleteTags
              - ec2:*
              - elasticfilesystem:*
            Effect: Allow
            Resource: '*'
          - Action:
              - codecommit:UploadArchive
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:GetBranch
              - codecommit:CancelUploadArchive
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            # Resource: '*'
            Resource:
              - !If [
                  CreateSourceBucket,
                  !GetAtt SourceBucket.Arn,
                  !Ref ExistingSourceBucket,
                ]
              - Fn::Join:
                  - ''
                  - - !If [
                        CreateSourceBucket,
                        !GetAtt SourceBucket.Arn,
                        !Ref ExistingSourceBucket,
                      ]
                    - /*
              - '*'
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ExtractBuild
                  - Arn
              - Fn::GetAtt:
                  - ImageBuild
                  - Arn
          - Action:
              - cloudformation:CreateChangeSet
              - cloudformation:DescribeStacks
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:cloudformation:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':stack/'
                  - Ref: ApplicationStackName
                  - '/*'
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !GetAtt [ExtractBuildRole, Arn]

  ImageBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  ImageBuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ImageBuildRoleDefaultPolicy
      Roles:
        - Ref: ImageBuildRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - elasticfilesystem:*
              - ec2:*
            Effect: Allow
            Resource: '*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:'
                    - Ref: AWS::Partition
                    - ':logs:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: ImageBuild
                    - :*
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - !If [
                  CreateSourceBucket,
                  !GetAtt SourceBucket.Arn,
                  !Ref ExistingSourceBucket,
                ]
              - Fn::Join:
                  - ''
                  - - !If [
                        CreateSourceBucket,
                        !GetAtt SourceBucket.Arn,
                        !Ref ExistingSourceBucket,
                      ]
                    - /*
          - Action:
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Effect: Allow
            Resource:
              - '*'
              # - !If [
              #     CreateEcrRepository,
              #     !GetAtt EcrRepository.Arn,
              #     !Ref ExistingEcrRepositoryArn,
              #   ]
              # - !If [
              #     CreateEcrRepository2,
              #     !GetAtt EcrRepository2.Arn,
              #     !Ref ExistingEcrRepositoryArn2,
              #   ]
              # - !GetAtt EcrRepository.Arn
              # - !GetAtt EcrRepository2.Arn

  ExtractBuildRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: '2012-10-17'

  ExtractBuildRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ExtractBuildRoleDefaultPolicy
      Roles:
        - Ref: ExtractBuildRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - codebuild:*
              - codepipeline:*
              - ec2:*
              - elasticfilesystem:*
            Effect: Allow
            Resource: '*'
          - Action: 'ecr:*'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:'
                    - Ref: AWS::Partition
                    - ':logs:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: ExtractBuild
                    - :*
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - !If [
                  CreateSourceBucket,
                  !GetAtt SourceBucket.Arn,
                  !Ref ExistingSourceBucket,
                ]
              - Fn::Join:
                  - ''
                  - - !If [
                        CreateSourceBucket,
                        !GetAtt SourceBucket.Arn,
                        !Ref ExistingSourceBucket,
                      ]
                    - /*

  ComposeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ComposeRolePolicy
      Roles:
        - Ref: ExtractBuildRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              # - ecr:BatchCheckLayerAvailability
              # - ecr:CompleteLayerUpload
              # - ecr:InitiateLayerUpload
              # - ecr:PutImage
              # - ecr:UploadLayerPart
              - ecr:*
              - cloudformation:*
              - ecs:ListAccountSettings
              - ecs:CreateCluster
              - ecs:CreateService
              - ecs:DeleteCluster
              - ecs:DeleteService
              - ecs:DeregisterTaskDefinition
              - ecs:DescribeClusters
              - ecs:DescribeServices
              - ecs:DescribeTasks
              - ecs:ListTasks
              - ecs:RegisterTaskDefinition
              - ecs:UpdateService
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:DescribeVpcs
              - ec2:DescribeVpcAttribute
              - ec2:DescribeSubnets
              - ec2:DescribeRouteTables
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:DeleteTags
              - ec2:DescribeSecurityGroups
              - ec2:DeleteSecurityGroup
              - ec2:RevokeSecurityGroupIngress
              - ec2:*
              - elasticfilesystem:CreateAccessPoint
              - elasticfilesystem:CreateFileSystem
              - elasticfilesystem:CreateMountTarget
              - elasticfilesystem:DeleteAccessPoint
              - elasticfilesystem:DeleteFileSystem
              - elasticfilesystem:DeleteMountTarget
              - elasticfilesystem:DescribeAccessPoints
              - elasticfilesystem:DescribeBackupPolicy
              - elasticfilesystem:DescribeFileSystemPolicy
              - elasticfilesystem:DescribeFileSystems
              - elasticfilesystem:DescribeLifecycleConfiguration
              - elasticfilesystem:DescribeMountTargets
              - elasticfilesystem:ModifyMountTarget
              - elasticfilesystem:ModifyMountTargetSecurityGroups
              - elasticfilesystem:*
              - iam:AttachRolePolicy
              - iam:CreateRole
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
              - iam:PutRolePolicy
              - elasticloadbalancing:*
              - application-autoscaling:*
              - servicediscovery:*
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:FilterLogEvents
              - logs:DeleteLogGroup
              - route53:CreateHostedZone
              - route53:DeleteHostedZone
              - route53:GetHealthCheck
              - route53:GetHostedZone
              - route53:ListHostedZonesByName
            Effect: Allow
            Resource:
              - '*'

  # CodeBuild to Build the Container Image
  ImageBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - '-'
        - - !Sub ${AWS::StackName}
          - 'ImageBuild'
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !Ref ImageBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo LOGGING IN TO AMAZON ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - pwd
                
                - echo FILES...
                - ls

                - echo BUILDING THE DJANGO IMAGE...

                - docker build -t ${ExistingEcrRepository}:latest .
                # - docker build -t $IMAGE_URI:$IMAGE_TAG .

                - cd nginx
                
                - echo BUILDING THE NGINX IMAGE...
                
                - docker build -t ${ExistingEcrRepository2}:latest .
                # - docker build -t $IMAGE_URI_2:$IMAGE_TAG .
            post_build:
              commands:
                - echo PUSHING THE DOCKER IMAGES...

                - docker push ${ExistingEcrRepository}:latest
                - docker push ${ExistingEcrRepository2}:latest
                # - docker push $IMAGE_URI:$IMAGE_TAG
                # - docker push $IMAGE_URI_2:$IMAGE_TAG

  # Code Build to Extract Cfn
  ExtractBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - '-'
        - - !Sub ${AWS::StackName}
          - 'ExtractBuild'
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !Ref ExtractBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
           install: 
             commands:
               - mv /usr/local/bin/docker /usr/bin/docker
               - curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
           pre_build:
             commands:
               - echo Logging in to Amazon ECR...
               - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
               - echo Creating Docker Compose Context
               - curl "http://169.254.170.2${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}" > creds.json
               - export AWS_ACCESS_KEY_ID=$(cat creds.json | jq -r .AccessKeyId)
               - export AWS_SECRET_ACCESS_KEY=$(cat creds.json | jq -r .SecretAccessKey)
               - export AWS_SESSION_TOKEN=$(cat creds.json | jq -r .Token)
               - docker context create ecs demoecs --from-env
               - docker context use demoecs
           build:
             commands:
               - echo Convert Compose File
               - pwd
               - ls
               - docker --debug compose convert > cloudformation.yml
          artifacts:
            files:
              - cloudformation.yml

  # Code Pipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location:
          !If [
            CreateSourceBucket,
            !Ref SourceBucket,
            !Ref ExistingSourceBucketName,
          ]
      RoleArn:
        Fn::GetAtt:
          - PipelineRole
          - Arn
      Stages:
        # - Name: S3Source
        #   Actions:
        #     - Name: TemplateSource
        #       ActionTypeId:
        #         Category: Source
        #         Owner: AWS
        #         Provider: S3
        #         Version: '1'
        #       Configuration:
        #         S3Bucket: !Ref SourceBucket
        #         S3ObjectKey: 'compose-bundle.zip'
        #       OutputArtifacts:
        #         - Name: Source

        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Sub '${AWS::StackName}'
                BranchName: !Ref Branch
              OutputArtifacts:
                - Name: Source
              RunOrder: 1

        - Name: Approval
          Actions:
            - Name: ApprovalAction
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 2

        - Name: Build
          Actions:
            - Name: BuildContainerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref ImageBuild
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "AWS_ACCOUNT_ID",
                      "value": "${AWS::AccountId}",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ImageBuild
              # RunOrder: 3

        - Name: Compose2Cloudformation
          Actions:
            - Name: ExtractCFN
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref ExtractBuild
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "AWS_ACCOUNT_ID",
                      "value": "${AWS::AccountId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "AWS_ECS_CLUSTER",
                      "value": "my-site",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "AWS_VPC",
                      "value": "vpc-0b4f83a02425d0827",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "AWS_ELB",
                      "value": "my-site-backend-ALB",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ExtractedCfn
              # RunOrder: 4

        - Name: DeployStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: ExtractedCfn
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [ExtractBuildRole, Arn]
                StackName: !Ref ApplicationStackName
                ChangeSetName: !Ref ChangeSetName
                TemplatePath: 'ExtractedCfn::cloudformation.yml'
                Capabilities: CAPABILITY_IAM
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Ref ApplicationStackName
                ChangeSetName: !Ref ChangeSetName
                RoleArn: !GetAtt [ExtractBuildRole, Arn]
              RunOrder: 3
# Outputs:
#   EcrRepository:
#     Description: ECR Repository to store the first image
#     Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}'
#   EcrRepositoryName:
#     Description: ECR Repository to store the first image
#     Value: !Ref EcrRepository
#   EcrRepository2:
#     Description: ECR Repository to store the second image
#     Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository2}'
#   EcrRepositoryName2:
#     Description: ECR Repository to store the second image
#     Value: !Ref EcrRepository2
#   S3BucketName:
#     Description: S3 Bucket to store Application Source Code
#     Value: !Ref SourceBucket
