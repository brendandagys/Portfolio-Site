AWSTemplateFormatVersion: 2010-09-09

Parameters:
  StackName:
    Type: String
    Default: my-site
    Description: The name of the parent Fargate networking stack that you       created. Necessary to locate and reference resources created by that stack.

  Certificate:
    Type: String
    Default: arn:aws:acm:us-east-1:708746137251:certificate/32d925f9-559d-4300-b9a2-33849a09d9df

  Repository:
    Type: String
    Default: my-site
  Branch:
    Type: String
    Default: main
    Description: 'e.g. main or master'

  ServiceName:
    Type: String
    Default: my-site-backend
  ImageURL:
    Type: String
    Default: '708746137251.dkr.ecr.us-east-1.amazonaws.com/my-site-backend'
    Description: The URL of a Docker image that contains the application process that will handle the traffic for this service
  ContainerName:
    Type: String
    Default: my-site-backend
  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number that the application inside the Docker container is binding to
  ContainerCPU:
    Type: Number
    Default: 256
    Description: How many CPU to assign to the container (1024 = 1 CPU)
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How many MB of memory to assign to the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: The number of copies of the service task to run

  Domain:
    Type: String
    Default: brendandagys.com
  DomainWWW:
    Type: String
    Default: www.brendandagys.com

  EnvironmentName:
    Description: An environment name that is prefixed to the VPC and IGW
    Type: String
    Default: my-site

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: MyAppCode
              Configuration:
                RepositoryName: !Ref Repository
                BranchName: !Ref Branch
              RunOrder: 2
        - Name: Approval
          Actions:
            - Name: ApprovalAction
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: MyAppCode
              OutputArtifacts:
                - Name: MyAppBuild
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 3

  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:GetBranch'
                  - 'codecommit:CancelUploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, '/*']]

  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:4.0'
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              INLINE_RUNTIME_CHUNK: "false"
          phases:
            install:
              commands:
                - cd frontend
                - npm install
            build:
              commands:
                - npm run build
                - echo $CODEBUILD_SRC_DIR
            post_build:
              on-failure: CONTINUE
              commands:
                - aws s3 cp --recursive --acl public-read ./build s3://${DeployBucket}/
                #uncomment if you have service-worker.js 
                
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${DeployBucket}/
                
                - aws cloudfront create-invalidation --distribution-id ${Distribution} --paths "/*"
                
          artifacts:
            files:
              - 'frontend/build/**/*'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, '/*']]
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - !GetAtt DeployBucket.Arn
                  - !Join ['', [!GetAtt DeployBucket.Arn, '/*']]
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudfront:CreateInvalidation'
                Resource:
                  - '*'

  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: my-site-pipeline-artifacts
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true

  DeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref Domain
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true

  DeployBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeployBucket
      PolicyDocument:
        Id: MySiteDeployBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DeployBucket
                - /*

  DistributionLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-site-cloudfront-distribution-logs'
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpireLogs
            ExpirationInDays: 365
            Status: Enabled

  LoadBalancerLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-site-load-balancer-logs'
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpireLogs
            ExpirationInDays: 365
            Status: Enabled

  LoadBalancerLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoadBalancerLogsBucket
      PolicyDocument:
        Id: MySiteLoadBalancerLogsBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForWriteOfLoadBalancerLogs
            Effect: Allow
            Principal:
              AWS: 127311923021 # us-east-1
            Action: s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref LoadBalancerLogsBucket
                - /*

  Distribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - DistributionLogsBucket
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Connects to an S3 Bucket that hosts a React single-page-application
        Aliases:
          - !Ref Domain
          - !Ref DomainWWW
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: false
        DefaultCacheBehavior:
          TargetOriginId: !Ref DeployBucket
          ViewerProtocolPolicy: 'redirect-to-https'
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !Ref CloudFrontFunction
        CacheBehaviors:
          - PathPattern: api/*
            TargetOriginId: !Ref FargateService
            ViewerProtocolPolicy: 'redirect-to-https'
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !Ref CloudFrontFunction
        Origins:
          - Id: !Ref DeployBucket
            DomainName: !GetAtt DeployBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  '',
                  [
                    'origin-access-identity/cloudfront/',
                    !Ref OriginAccessIdentity,
                  ],
                ]
          - Id: !Ref FargateService
            DomainName: !GetAtt FargateServiceLoadBalancer.DNSName
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        Logging:
          Bucket: my-site-cloudfront-distribution-logs.s3.amazonaws.com
          IncludeCookies: true

  CloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: my-site-viewer-response-function
      FunctionConfig:
        Comment: Adds HTTP security headers to the viewer response
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var response = event.response;
          var headers = response.headers;

          // Set HTTP security headers
          // Since JavaScript doesn't allow for hyphens in variable names, we use the dict["key"] notation 
          
          headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; 
          
          headers['content-security-policy'] = { value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; connect-src 'self'; manifest-src 'self'"}; 
          
          headers['x-content-type-options'] = { value: 'nosniff'}; 
          headers['x-frame-options'] = {value: 'DENY'}; 
          headers['x-xss-protection'] = {value: '1; mode=block'}; 

          // Return the response to viewers 
          return response;
        }

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'brendandagys.com OAI'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-site

  FargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTPS
      # - ListenerHTTP
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FargateServiceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref FargateServiceLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
          SecurityGroups:
            - !Ref FargateServiceSecurityGroup
      EnableECSManagedTags: true

  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-site-backend
      NetworkMode: awsvpc
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: 'arn:aws:iam::708746137251:role/ecsTaskExecutionRole'
      ContainerDefinitions:
        - Image: !Ref ImageURL
          Name: !Ref ContainerName
          PortMappings:
            - Protocol: tcp
              ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref FargateTaskDefinitionLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: NODE_ENV
              Value: production

  FargateTaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/ecs/my-site-backend-task-definition'

  FargateServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Fargate Service Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FargateServiceSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt FargateServiceLoadBalancerSecurityGroup.GroupId
      GroupId: !GetAtt FargateServiceSecurityGroup.GroupId

  FargateServiceLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-site-backend-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FargateServiceLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LoadBalancerLogsBucket

  FargateServiceLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-site-backend-target-group
      Protocol: HTTP
      Port: !Ref ContainerPort
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: '/api/health'

  FargateServiceLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Fargate Service ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FargateServiceLoadBalancerSecurityGroupOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt FargateServiceSecurityGroup.GroupId
      GroupId: !GetAtt FargateServiceLoadBalancerSecurityGroup.GroupId

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FargateServiceLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FargateServiceLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref Certificate

  # ListenerHTTP:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: redirect
  #         RedirectConfig:
  #           Protocol: HTTPS
  #           Port: 443
  #           Host: '#{host}'
  #           Path: '/#{path}'
  #           Query: '#{query}'
  #           StatusCode: 'HTTP_301'
  #     LoadBalancerArn: !Ref FargateServiceLoadBalancer
  #     Protocol: HTTP
  #     Port: 80

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z1048063LC3J2IKH5GGI
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt Distribution.DomainName

  DNSRecordWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z1048063LC3J2IKH5GGI
      Name: !Ref DomainWWW
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt Distribution.DomainName

  # DESCRIPTION:

  # The following section deploys a VPC, with a pair of public and private subnets spread across two Availability Zones.

  # It deploys an internet gateway, with a default route on the public subnets.

  # It deploys a pair of NAT gateways (one in each AZ), and default routes for them in the private subnets.

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'no-ingress-sg'
      GroupDescription: 'Security group with no ingress rule'
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
